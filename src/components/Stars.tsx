import { useState, useRef, Suspense } from 'react'; //  Suspense is a component that allows you to "suspend" certain parts of the component from rendering until a condition is met
import { Canvas, useFrame } from '@react-three/fiber'; // Here we import the components from the React library to work with Three.js, Canvas is the main component that creates a 3D scene, and useFrame is a Hook that allows code to be executed at each frame of the 3D scene animation
import { Points, PointMaterial, Preload } from '@react-three/drei'; // Points is a component that represents a cloud of points in the 3D scene, PointMaterial is a material that we use to render those points, and Preload is a utility that preloads all 3D resources.

/**
 * Generates random points inside a sphere.
 *
 * @param count The number of points to generate.
 * @param radius The radius of the sphere.
 * @returns An array of positions representing the points.
 */
function randomInSphere(count: number, radius: number) {
  const positions = new Float32Array(count * 3);
  for (let i = 0; i < count; i += 1) {
    const r = radius * Math.cbrt(Math.random());
    const theta = Math.random() * 2 * Math.PI;
    const phi = Math.acos(2 * Math.random() - 1);
    positions[3 * i] = r * Math.sin(phi) * Math.cos(theta);
    positions[3 * i + 1] = r * Math.sin(phi) * Math.sin(theta);
    positions[3 * i + 2] = r * Math.cos(phi);
  }
  return positions;
}

/**
 * Component that generates a cloud of stars.
 *
 * @param props Other props to pass to the component.
 * @returns The Stars component.
 */
function Stars({ ...props }) {
  const ref = useRef(null || props);
  const [sphere] = useState(() => randomInSphere(5000, 1.2));

  useFrame((state, delta) => {
    if (ref.current) {
      ref.current.rotation.x -= delta / 10;
      ref.current.rotation.y -= delta / 15;
    }
  });

  return (
    <group rotation={[0, 0, Math.PI / 4]}>
      <Points
        ref={ref as React.MutableRefObject<THREE.Points>}
        positions={sphere}
        stride={3}
        frustumCulled
        {...props}
      >
        {' '}
        {/* Points component that creates the cloud of points (stars). It uses the positions generated by the randomInSphere function and passes other props through. */}
        <PointMaterial
          transparent
          color="#f272c8"
          size={0.002}
          sizeAttenuation
          depthWrite={false}
        />{' '}
        {/* PointMaterial component that defines the point material. It is transparent, pink in color, and has a size of 0.002. */}
      </Points>
    </group>
  );
}

/**
 * Component that creates a 3D scene with a point cloud of stars.
 *
 * @returns The StarsCanvas component.
 */
function StarsCanvas() {
  return (
    <div className="w-full bg-black h-auto absolute inset-0 z-[-1]">
      <Canvas camera={{ position: [0, 0, 1] }}>
        <Suspense fallback={null}>
          <Stars />
        </Suspense>
        <Preload all />
      </Canvas>
    </div>
  );
}

export default StarsCanvas;
